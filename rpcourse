# The makeCacheMatrix function carries out several key operations:
# It takes an optional input parameter x, defaulting to an empty matrix if none is provided.
# It sets up a variable inv initialized to NULL to store the matrix’s inverse.
# Within its structure, it defines four inner functions:
# set(y): Updates the matrix x with a new value y and resets inv to NULL, using the <<- operator for assignment in the outer scope.
# get(): Returns the current value of the matrix x.
# setinv(inv): Stores the specified inverse value in the variable inv.
# getinv(): Retrieves the current inverse value.
## In the end, the function generates a list containing these four inner functions.

makeCacheMatrix <- function(x = matrix(sample(1:100,9),3,3)) {
  s <- NULL
  set <- function(y) {
    x <<- y
    s <<- NULL
  }
  get <- function() x
  setsolve <- function(solve) s <<- solve
  getsolve <- function() s
  list(set = set, get = get,
       setsolve = setsolve,
       getsolve = getsolve)
}

############################################################

# The cacheSolve function is specifically designed to work with the matrix object created by makeCacheMatrix. 
# Its primary function is to compute and store the matrix’s inverse, retrieving the cached value if it has already been calculated. Here’s a breakdown of its operations:
# The function accepts a matrix object, x, generated by makeCacheMatrix, along with optional additional arguments for the solve function.
# It attempts to retrieve the inverse by invoking x$getinv(), which calls the getinv function from makeCacheMatrix.
# If the inverse is not NULL, this indicates that a cached value is available. The function will then print a message stating that it is using the cached result and return this value.
# If the inverse is NULL, implying no cached value exists, the function calculates the inverse by following these steps:
# It obtains the matrix data through x$get().
# It computes the inverse using solve(data, ...).
# It stores the newly calculated inverse back into the matrix object using x$setinv(inv).
# Finally, it returns the calculated inverse.
## In summary, cacheSolve efficiently manages the calculation and storage of a matrix’s inverse, enhancing performance by avoiding redundant calculations when possible.

cacheSolve <- function(x, ...) {
  s <- x$getsolve()
  if(!is.null(s)) {
    message("getting inversed matrix")
    return(s)
  }
  data <- x$get()
  s <- solve(data, ...)
  x$setsolve(s)
  s
}
